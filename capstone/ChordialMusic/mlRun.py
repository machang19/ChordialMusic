import keras.models
import numpy as np

model_path = "mlModels/b128_e50_lstm64_0.3_0.3x2"
model = keras.models.load_model(model_path)

window = 4
Chords = {0: 'A', 1: 'A#', 2: 'B', 3: 'C', 4: 'C#', 5: 'D', 6: 'D#', 7: 'E', 8: 'F', 9: 'F#', 10: 'G', 11: 'G#', 12: 'Am', 13: 'A#m', 14: 'Bm', 15: 'Cm', 16: 'C#m', 17: 'Dm', 18: 'D#m', 19: 'Em', 20: 'Fm', 21: 'F#m', 22: 'Gm', 23: 'G#m'}
ChordToNote = {
    'A':   [1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0],
    'A#':  [0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    'B':   [0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0, 0],
    'C':   [0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1, 0],
    'C#':  [0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 1],
    'D':   [1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    'D#':  [0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0],
    'E':   [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 1],
    'F':   [1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
    'F#':  [0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    'G':   [0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    'G#':  [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 1],
    'Am':  [1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0],
    'A#m': [0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0],
    'Bm':  [0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0, 0],
    'Cm':  [0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1, 0],
    'C#m': [0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 1],
    'Dm':  [1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0],
    'D#m': [0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0],
    'Em':  [0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1, 0],
    'Fm':  [0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 1],
    'F#m': [1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0],
    'Gm':  [0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0],
    'G#m': [0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1]
}

def predict(inp, numBars):
    res = []
    pred = model.predict(inp)
    # out = np.zeros((len(pred), 4, 24))
    for x in range(0, numBars/2 - 1):
        argmax = np.argmax(pred[x], axis = 1)
        for i, arg in enumerate(argmax):
            if (x % 2 == 0):
                res.append(ChordToNote[Chords[arg]])
    return res
